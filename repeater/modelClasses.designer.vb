'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="practice")>  _
Partial Public Class modelClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertpurchaseAdvice(instance As purchaseAdvice)
    End Sub
  Partial Private Sub UpdatepurchaseAdvice(instance As purchaseAdvice)
    End Sub
  Partial Private Sub DeletepurchaseAdvice(instance As purchaseAdvice)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("practiceConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property purchaseAdvices() As System.Data.Linq.Table(Of purchaseAdvice)
		Get
			Return Me.GetTable(Of purchaseAdvice)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.purchaseAdvice")>  _
Partial Public Class purchaseAdvice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PostId As Integer
	
	Private _brokerId As System.Nullable(Of Integer)
	
	Private _emaill As String
	
	Private _createdon As System.Nullable(Of Date)
	
	Private _createdby As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPostIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPostIdChanged()
    End Sub
    Partial Private Sub OnbrokerIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbrokerIdChanged()
    End Sub
    Partial Private Sub OnemaillChanging(value As String)
    End Sub
    Partial Private Sub OnemaillChanged()
    End Sub
    Partial Private Sub OncreatedonChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncreatedonChanged()
    End Sub
    Partial Private Sub OncreatedbyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncreatedbyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PostId() As Integer
		Get
			Return Me._PostId
		End Get
		Set
			If ((Me._PostId = value)  _
						= false) Then
				Me.OnPostIdChanging(value)
				Me.SendPropertyChanging
				Me._PostId = value
				Me.SendPropertyChanged("PostId")
				Me.OnPostIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_brokerId", DbType:="Int")>  _
	Public Property brokerId() As System.Nullable(Of Integer)
		Get
			Return Me._brokerId
		End Get
		Set
			If (Me._brokerId.Equals(value) = false) Then
				Me.OnbrokerIdChanging(value)
				Me.SendPropertyChanging
				Me._brokerId = value
				Me.SendPropertyChanged("brokerId")
				Me.OnbrokerIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emaill", DbType:="VarChar(50)")>  _
	Public Property emaill() As String
		Get
			Return Me._emaill
		End Get
		Set
			If (String.Equals(Me._emaill, value) = false) Then
				Me.OnemaillChanging(value)
				Me.SendPropertyChanging
				Me._emaill = value
				Me.SendPropertyChanged("emaill")
				Me.OnemaillChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdon", DbType:="DateTime")>  _
	Public Property createdon() As System.Nullable(Of Date)
		Get
			Return Me._createdon
		End Get
		Set
			If (Me._createdon.Equals(value) = false) Then
				Me.OncreatedonChanging(value)
				Me.SendPropertyChanging
				Me._createdon = value
				Me.SendPropertyChanged("createdon")
				Me.OncreatedonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_createdby", DbType:="Int")>  _
	Public Property createdby() As System.Nullable(Of Integer)
		Get
			Return Me._createdby
		End Get
		Set
			If (Me._createdby.Equals(value) = false) Then
				Me.OncreatedbyChanging(value)
				Me.SendPropertyChanging
				Me._createdby = value
				Me.SendPropertyChanged("createdby")
				Me.OncreatedbyChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
